<?xml version="1.0" encoding="utf-8"?>
<s:Application
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        backgroundColor="#979797"
        applicationComplete="selectedShapeChanged(); selectedFilterChanged()"
        >

    <fx:Script>
    <![CDATA[

        import de.viaboxx.flexboxx.editors.SpinnerEditor;

        import mx.collections.ArrayList;
        import mx.core.UIComponent;
        import mx.graphics.SolidColor;
        import mx.graphics.SolidColorStroke;

        import spark.components.Label;
        import spark.filters.BevelFilter;
        import spark.filters.BlurFilter;
        import spark.filters.GlowFilter;
        import spark.primitives.Ellipse;
        import spark.primitives.Rect;
        import spark.primitives.RectangularDropShadow;

        //        import spark.primitives.RectangularDropShadow;

        import spark.primitives.supportClasses.FilledElement;


        public var filterId:String;

        // Common padding of elements
        private static const PADDING:int = 10;
        private static const LEFT_AREA_WIDTH:int = 210;
        private static const DEFAULT_SHAPE_HEIGHT:int = 200;
        private static const DEFAULT_SHAPE_WIDTH:int = 200;

        private static const sourceGenerator:FilterSourceGenerator = new FilterSourceGenerator();

        private var filterList:ArrayList = new ArrayList([
            new DropShadowFilter(),
            new GlowFilter(),
            new BevelFilter(),
            new BlurFilter()
            //            new ColorMatrixFilter(),
            //            new ConvolutionFilter(),
            //            new GradientBevelFilter(),
            //            new GradientGlowFilter(),
            //            new ShaderFilter();
        ]);

        private var filter:* = dropShadowFilter;

        /**
         * @private
         * Configures the given shape to some default values.
         * @param shape The shape being configured
         * @return The changed shape instance.
         */
        private function initShape(shape:FilledElement):FilledElement {
            shape.width = DEFAULT_SHAPE_WIDTH;
            shape.height = DEFAULT_SHAPE_HEIGHT;
            shape.horizontalCenter = 0;
            shape.verticalCenter = 0;
            shape.fill = new SolidColor(0xFF0000);
            shape.stroke = new SolidColorStroke(0);
            return shape;
        }

        private var shapeList:ArrayList = new ArrayList([
            initShape(new Rect()) ,
            initShape(new Ellipse())
        ]);

        private var shape:FilledElement;

        private var timeoutId:uint;

        private function updateSources():void {
            theSource.text = sourceGenerator.sourceForFilter(filter,filterId);
        }

        private function scheduleSourcesUpdate():void {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function():void {
                updateSources();
            }, 100);
        }

        private function addFilterPropertyEditors():void {
            var filterDescription:FilterDescription = FilterDescription.forFilter(filter);
            addIdProperty();
            filterDescription.forEachProperty(function(property:Property):void {
                var component:UIComponent = createPropertyEditor(filter, property, function(e:Event):void {
                    scheduleSourcesUpdate();
                });
                if (component)
                    filterProperties.addElement(component);
            });
        }

        private function selectedFilterChanged():void {
            if (filterCombobox.selectedIndex == -1) {
                filterCombobox.selectedIndex = 0;
            }
            filter = filterCombobox.selectedItem;
            removeFilterFromShape();
            clearFilterPropertyEditors();
            addFilterPropertyEditors();
            addFilterToShape();
            updateSources();
        }

        private function clearFilterPropertyEditors():void {
            filterProperties.removeAllElements();
        }

        private function addFilterToShape():void {
            shape.filters = [filter];
        }

        private function removeFilterFromShape():void {
            shape.filters = [];
        }

        private function selectedShapeChanged():void {
            function createLabel(text:String):Label {
                var label:Label = new Label();
                label.text = text;
                return label;
            }

            function addEditor(element:*, propertyData:Object, editorClass:Class = null):void {
                if (!element.hasOwnProperty(propertyData.name)) {
                    return;
                }

                var property:Property = new Property(propertyData.name, propertyData.type);
                if (propertyData.hasOwnProperty("displayName")) {
                    property.displayName = propertyData.displayName;
                }
                if (propertyData.hasOwnProperty("minValue")) {
                    property.minValue = propertyData.minValue;
                }
                if (propertyData.hasOwnProperty("maxValue")) {
                    property.maxValue = propertyData.maxValue;
                }
                shapeProperties.addElement(createPropertyEditor(element, property, null, editorClass));
            }

            if (shapeCombobox.selectedIndex == -1) {
                shapeCombobox.selectedIndex = 0;
            }

            shape = shapeCombobox.selectedItem;

            addFilterToShape();
            shapeGroup.removeAllElements();
            shapeGroup.addElement(shape);

            // Create the editor controls.
            shapeProperties.removeAllElements();

            addEditor(shapeBackground.fill, {name: "color", displayName: "Background color", type: uint});
            addEditor(shapeBackground.fill, {name: "alpha", displayName: "Background alpha", type: Number, minValue: 0, maxValue: 1});

            addEditor(shape.fill, {name: "color", displayName:"Fill color", type: uint});
            addEditor(shape.stroke, {name: "color", displayName:"Stroke color", type: uint});
            addEditor(shape.stroke, {name: "weight", displayName:"Stroke weight", type: Number});

            addEditor(shape, {name: "width", type: Number, minValue: 0}, SpinnerEditor);
            addEditor(shape, {name: "height", type: Number, minValue: 0}, SpinnerEditor);

            addEditor(shape, {name: "alpha", type: Number, minValue: 0, maxValue: 1});
            addEditor(shape, {name: "rotation", type: Number, minValue: 0, maxValue: 360});
            addEditor(shape, {name: "radiusX", type: Number});
            addEditor(shape, {name: "radiusY", type: Number});
        }


        private function classNameLabel(item:*):String {
            var typeName:String = describeType(item).@name;
            return typeName.substr(typeName.lastIndexOf(":") + 1);
        }

        private function copySourceToClipboard():void {
            System.setClipboard(theSource.text);
        }

        private function addIdProperty():void {
            var idProperty:Property = new Property("filterId", String);
            idProperty.displayName = "id";

            filterProperties.addElement(createPropertyEditor(this, idProperty, function(e:Event):void {
                scheduleSourcesUpdate();
            }));
        }

        ]]>
        </fx:Script>


    <fx:Declarations>
        <s:DropShadowFilter
                id="dropShadowFilter"
                />
    </fx:Declarations>

    <s:HGroup
            width="100%"
            height="100%"
            >
        <s:Scroller
                width="{editors.width + 2 * PADDING}"
                height="100%"
                >
            <s:VGroup
                    id="editors"
                    width="{LEFT_AREA_WIDTH}"
                    gap="10"
                    paddingLeft="{PADDING}"
                    paddingTop="{PADDING}"
                    >

                <!--Filter editor-->
                <s:Panel
                        skinClass="de.viaboxx.flexboxx.skins.TopControlBarPanelSkin"
                        title="Filter"
                        width="100%"
                        >
                    <s:layout>
                        <s:VerticalLayout
                                paddingTop="{PADDING}"
                                paddingLeft="{PADDING}"
                                paddingBottom="{PADDING}"
                                paddingRight="{PADDING}"
                                />
                    </s:layout>
                    <s:controlBarLayout>
                        <s:HorizontalLayout
                                gap="5"
                                paddingLeft="5"
                                paddingTop="5"
                                paddingBottom="5"
                                />
                    </s:controlBarLayout>
                    <s:controlBarContent>
                        <s:Label
                                text="Filter:"
                                height="100%"
                                verticalAlign="middle"
                                />
                        <s:ComboBox
                                id="filterCombobox"
                                verticalCenter="0"
                                labelFunction="classNameLabel"
                                dataProvider="{filterList}"
                                change="selectedFilterChanged()"
                                />
                    </s:controlBarContent>

                    <s:VGroup
                            id="filterProperties"
                            width="100%"
                            />
                </s:Panel>

                <!--Shape editors-->
                <s:Panel
                        skinClass="de.viaboxx.flexboxx.skins.TopControlBarPanelSkin"
                        title="Shape"
                        width="100%"
                        >
                    <s:layout>
                        <s:VerticalLayout
                                paddingTop="{PADDING}"
                                paddingLeft="{PADDING}"
                                paddingBottom="{PADDING}"
                                paddingRight="{PADDING}"
                                />
                    </s:layout>
                    <s:controlBarLayout>
                        <s:HorizontalLayout
                                paddingLeft="5"
                                paddingTop="5"
                                paddingBottom="5"
                                gap="5"
                                />
                    </s:controlBarLayout>
                    <s:controlBarContent>
                        <s:Label text="Shape:"
                                 height="100%"
                                 verticalAlign="middle"
                                />
                        <s:ComboBox
                                id="shapeCombobox"
                                dataProvider="{shapeList}"
                                labelFunction="classNameLabel"
                                change="selectedShapeChanged()"
                                />
                    </s:controlBarContent>

                    <s:VGroup
                            id="shapeProperties" width="100%"/>
                </s:Panel>
            </s:VGroup>
        </s:Scroller>

        <!-- Output -->
        <mx:VDividedBox
                width="100%"
                height="100%"
                liveDragging="true"
                >
            <s:Group
                    width="100%"
                    height="100%"
                    >
                <s:Rect
                        width="100%"
                        height="100%"
                        top="{PADDING}"
                        right="{PADDING}"
                        >
                    <s:fill>
                        <s:BitmapFill
                                source="@Embed(source='../../../../resources/grid.png')"
                                fillMode="repeat"
                                />
                    </s:fill>
                </s:Rect>
                <s:Rect
                        id="shapeBackground"
                        width="100%"
                        height="100%"
                        top="{PADDING}"
                        right="{PADDING}"
                        >
                    <s:fill>
                        <s:SolidColor
                                color="#ffffff"
                                alpha="0"
                                />
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke color="#000000"/>
                    </s:stroke>
                </s:Rect>
                <s:Group
                        id="shapeGroup"
                        width="100%"
                        height="100%"
                        />
            </s:Group>
            <s:VGroup
                    id="sourceGroup"
                    width="100%"
                    height="300"
                    paddingBottom="{PADDING}"
                    paddingRight="{PADDING}"
                    >
                <s:Panel
                        width="100%"
                        height="100%"
                        title="Filter Source Code"
                        skinClass="de.viaboxx.flexboxx.skins.TopControlBarPanelSkin"
                        >
                    <s:layout>
                        <s:VerticalLayout
                                horizontalAlign="center"
                                />
                    </s:layout>
                    <s:controlBarLayout>
                        <s:HorizontalLayout
                                gap="5"
                                paddingTop="5"
                                paddingLeft="5"
                                paddingBottom="5"
                                />
                    </s:controlBarLayout>
                    <s:controlBarContent>
                        <s:Label
                                text="Filter Source Code:"
                                height="100%"
                                verticalAlign="middle"/>
                        <s:Button
                                label="Copy to Clipboard"
                                click="copySourceToClipboard()"
                                />

                    </s:controlBarContent>
                    <s:TextArea
                            id="theSource"
                            editable="false"
                            width="100%"
                            height="100%"
                            />

                </s:Panel>
            </s:VGroup>
        </mx:VDividedBox>
    </s:HGroup>


</s:Application>
