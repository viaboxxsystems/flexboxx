<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        showStatusBar="false"
        width="1024"
        height="768"
        backgroundColor="#979797"
        applicationComplete="selectedShapeChanged(); selectedFilterChanged()"
        >

    <fx:Style>
        @namespace
        s
        "library://ns.adobe.com/flex/spark"
        ;
    </fx:Style>

    <fx:Script>
    <![CDATA[

        import mx.collections.ArrayList;
        import mx.core.UIComponent;
        import mx.graphics.SolidColor;
        import mx.graphics.SolidColorStroke;

        import spark.components.Label;
        import spark.filters.BevelFilter;
        import spark.filters.BlurFilter;
        import spark.filters.ColorMatrixFilter;
        import spark.filters.ConvolutionFilter;
        import spark.filters.GlowFilter;
        import spark.filters.GradientBevelFilter;
        import spark.filters.GradientGlowFilter;
        import spark.filters.ShaderFilter;
        import spark.primitives.Ellipse;
        import spark.primitives.Rect;
        import spark.primitives.supportClasses.FilledElement;

        private var filterList:ArrayList = new ArrayList([
            new DropShadowFilter(),
            new GlowFilter(),
            new BevelFilter(),
            new BlurFilter(),
            new ColorMatrixFilter(),
            new ConvolutionFilter(),
            new GradientBevelFilter(),
            new GradientGlowFilter(),
            new ShaderFilter()]);

        public var filter:IBitmapFilter = dropShadowFilter;

        // Common padding of elements 
        private const padding:int = 10;

        private function initShape(shape:FilledElement):FilledElement {
            shape.percentWidth = 50;
            shape.percentHeight = 50;
            shape.horizontalCenter = 0;
            shape.verticalCenter = 0;
            shape.fill = new SolidColor(0xFF0000);
            shape.stroke = new SolidColorStroke(0);
            return shape;
        }

        private var shapeList:ArrayList = new ArrayList([
            initShape(new Rect()) ,
            initShape(new Ellipse())
        ]);

        public var shape:FilledElement;

        private static const sourceGenerator:FilterSourceGenerator = new FilterSourceGenerator();

        private function generateSources():String {
            if (filter) {
                return sourceGenerator.sourceForFilter(filter);
            } else {
                return "NO FILTER SELECTED";
            }

        }

        private function addFilterPropertyEditors():void {
            FilterDescription.forFilter(filter).forEachProperty(function(property:Property):void {
                var component:UIComponent = createPropertyEditor(filter, property);
                if (component) {
                    filterProperties.addElement(component);
                }
            });
        }

        private function selectedFilterChanged():void {
            if (filterCombobox.selectedIndex == -1) {
                filterCombobox.selectedIndex = 0;
            }
            filter = filterCombobox.selectedItem;
            removeFilterFromShape();
            clearFilterPropertyEditors();
            addFilterPropertyEditors();
            addFilterToShape();
        }

        private function clearFilterPropertyEditors():void {
            filterProperties.removeAllElements();
        }

        private function addFilterToShape():void {
            shape.filters = [filter];
        }

        private function removeFilterFromShape():void {
            shape.filters = [];
        }

        private function selectedShapeChanged():void {
            function createLabel(text:String):Label {
                var label:Label = new Label();
                label.text = text;
                return label;
            }

            function addEditor(element:*, propertyData:Object):void {
                if (!element.hasOwnProperty(propertyData.name)) {
                    return;
                }

                var property:Property = new Property(propertyData.name, propertyData.type);
                if (propertyData.hasOwnProperty("minValue")) {
                    property.minValue = propertyData.minValue;
                }
                if (propertyData.hasOwnProperty("maxValue")) {
                    property.maxValue = propertyData.maxValue;
                }
                shapeProperties.addElement(createPropertyEditor(element, property));
            }

            if (shapeCombobox.selectedIndex == -1) {
                shapeCombobox.selectedIndex = 0;
            }
            shape = shapeCombobox.selectedItem;
            addFilterToShape();
            shapeGroup.removeAllElements();
            shapeGroup.addElement(shape);

            // Create the editor controls.
            shapeProperties.removeAllElements();
            shapeProperties.addElement(createLabel("shape.fill"));
            addEditor(shape.fill, {name: "color", type: uint});
            shapeProperties.addElement(createLabel("shape.stroke"));
            addEditor(shape.stroke, {name: "color", type: uint});
            addEditor(shape.stroke, {name: "weight", type: Number});
            shapeProperties.addElement(createLabel("shape"));
            addEditor(shape, {name: "percentWidth", type: Number, minValue: 0, maxValue: 100});
            addEditor(shape, {name: "percentHeight", type: Number, minValue: 0, maxValue: 100});
            addEditor(shape, {name: "alpha", type: Number, minValue: 0, maxValue: 1});
            addEditor(shape, {name: "radiusX", type: Number});
            addEditor(shape, {name: "radiusY", type: Number});
        }

        ]]>
        </fx:Script>


    <fx:Declarations>
        <s:DropShadowFilter
                id="dropShadowFilter"
                />
    </fx:Declarations>

    <s:HGroup
            width="100%"
            height="100%"
            >
        <s:Scroller
                width="{editors.width + 2 * padding}"
                height="100%"
                >
            <s:VGroup
                    id="editors"
                    width="200"
                    gap="10"
                    paddingLeft="{padding}"
                    paddingTop="{padding}"
                    >

                <!--Filter editor-->
                <s:Panel
                        title="Filter"
                        width="100%"
                        >
                    <s:VGroup
                            paddingTop="{padding}"
                            paddingLeft="{padding}"
                            paddingBottom="{padding}"
                            paddingRight="{padding}"
                            >
                        <s:ComboBox
                                id="filterCombobox"
                                dataProvider="{filterList}"
                                change="selectedFilterChanged()"
                                />
                        <s:VGroup
                                id="filterProperties"
                                width="100%"
                                />
                    </s:VGroup>
                </s:Panel>

                <!--Shape editors-->
                <s:Panel
                        title="Shape"
                        width="100%"
                        >
                    <s:VGroup
                            paddingTop="{padding}"
                            paddingLeft="{padding}"
                            paddingBottom="{padding}"
                            paddingRight="{padding}"
                            >
                        <s:ComboBox id="shapeCombobox" dataProvider="{shapeList}" change="selectedShapeChanged()"/>
                        <s:VGroup id="shapeProperties" width="100%"/>
                    </s:VGroup>
                </s:Panel>
            </s:VGroup>
        </s:Scroller>

        <!-- Output -->
        <mx:VDividedBox
                width="100%"
                height="100%"
                liveDragging="true"
                >
            <s:Group
                    id="shapeGroup"
                    width="100%"
                    height="100%"
                    >
            </s:Group>
            <s:VGroup
                    height="300"
                    width="100%"
                    paddingBottom="{padding}"
                    paddingRight="{padding}"
                    >
                <s:HGroup
                        horizontalAlign="right"
                        width="100%"
                        >
                    <s:Button
                            label="Generate Sources"
                            click="{theSource.text = generateSources()}"
                            />
                </s:HGroup>
                <s:TextArea
                        id="theSource"
                        editable="false"
                        width="100%"
                        height="100%"
                        />

            </s:VGroup>
        </mx:VDividedBox>
    </s:HGroup>


</s:WindowedApplication>
