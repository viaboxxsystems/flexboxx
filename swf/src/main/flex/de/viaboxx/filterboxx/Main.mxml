<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        showStatusBar="true"
        width="800"
        height="600"
        backgroundColor="#EDEDED"
        applicationComplete="selectedShapeChanged(); selectedFilterChanged()"
        >
    <fx:Script>
    <![CDATA[

        import mx.collections.ArrayList;
        import mx.core.UIComponent;
        import mx.graphics.SolidColor;

        import spark.filters.BevelFilter;
        import spark.filters.BlurFilter;
        import spark.filters.ColorMatrixFilter;
        import spark.filters.ConvolutionFilter;
        import spark.filters.GlowFilter;
        import spark.filters.GradientBevelFilter;
        import spark.filters.GradientGlowFilter;
        import spark.filters.ShaderFilter;
        import spark.primitives.Ellipse;
        import spark.primitives.Rect;
        import spark.primitives.supportClasses.FilledElement;

        [Embed(source="../../../../resources/FuturaMediumBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="normal",
                fontWeight="normal",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const Futura:Class;

        [Embed(source="../../../../resources/FuturaMediumItalicBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="italic",
                fontWeight="normal",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const FuturaItalic:Class;

        [Embed(source="../../../../resources/FuturaBoldBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="normal",
                fontWeight="bold",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const FuturaBold:Class;

        [Embed(source="../../../../resources/FuturaBoldItalicBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="italic",
                fontWeight="bold",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const FuturaItalicBold:Class;


        private var filterList:ArrayList = new ArrayList([
            new DropShadowFilter(),
            new GlowFilter(),
            new BevelFilter(),
            new BlurFilter(),
            new ColorMatrixFilter(),
            new ConvolutionFilter(),
            //            new DisplacementMapFilter(),
            new DropShadowFilter(),
            new GradientBevelFilter(),
            new GradientGlowFilter(),
            new ShaderFilter()]);

        public var filter:IBitmapFilter = dropShadowFilter;

        private function initShape(shape:FilledElement):FilledElement {
            shape.percentWidth = 50;
            shape.percentHeight = 50;
            shape.horizontalCenter = 0;
            shape.verticalCenter = 0;
            shape.fill = new SolidColor(0xFF0000);
            return shape;
        }

        private var shapeList:ArrayList = new ArrayList([
            initShape(new Rect()) ,
            initShape(new Ellipse())
        ]);

        public var shape:FilledElement;

        private static const sourceGenerator:FilterSourceGenerator = new FilterSourceGenerator();

        private function generateSources():String {
            if (filter) {
                return sourceGenerator.sourceForFilter(filter);
            } else {
                return "NO FILTER SELECTED";
            }

        }

        private function addFilterPropertyEditors():void {
            FilterDescription.forFilter(filter).forEachProperty(function(property:FilterProperty):void {
                var component:UIComponent = createPropertyEditor(filter, property);
                if (component) {
                    filterProperties.addElement(component);
                }
            });
        }

        private function selectedFilterChanged():void {
            if (filterCombobox.selectedIndex == -1) {
                filterCombobox.selectedIndex = 0;
            }
            filter = filterCombobox.selectedItem;
            removeFilterFromShape();
            clearFilterPropertyEditors();
            addFilterPropertyEditors();
            addFilterToShape();
        }

        private function clearFilterPropertyEditors():void {
            filterProperties.removeAllElements();
        }

        private function addFilterToShape():void {
            shape.filters = [filter];
        }

        private function removeFilterFromShape():void {
            shape.filters = [];
        }

        private function selectedShapeChanged():void {
            function addEditor(object:*, propertyData:Object):void {
                if (!object.hasOwnProperty(propertyData.name)) {
                    return;
                }

                var property:FilterProperty = new FilterProperty(propertyData.name, propertyData.type);
                if (propertyData.hasOwnProperty("minValue")) {
                    property.minValue = propertyData.minValue;
                }
                if (propertyData.hasOwnProperty("maxValue")) {
                    property.maxValue = propertyData.maxValue;
                }
                shapeProperties.addElement(createPropertyEditor(object, property));
            }

            if (shapeCombobox.selectedIndex == -1) {
                shapeCombobox.selectedIndex = 0;
            }
            shape = shapeCombobox.selectedItem;
            addFilterToShape();
            shapeGroup.removeAllElements();
            shapeGroup.addElement(shape);

            // Create the editor controls.
            shapeProperties.removeAllElements();
            addEditor(shape.fill, {name: "color", type: uint});
            addEditor(shape, {name: "percentWidth", type: Number, minValue: 0, maxValue: 100});
            addEditor(shape, {name: "percentHeight", type: Number, minValue: 0, maxValue: 100});
            addEditor(shape, {name: "alpha", type: Number, minValue: 0, maxValue: 1});
            addEditor(shape, {name: "radiusX", type: Number});
            addEditor(shape, {name: "radiusY", type: Number});
        }

        ]]>
        </fx:Script>


    <fx:Declarations>
        <s:DropShadowFilter
                id="dropShadowFilter"
                />
    </fx:Declarations>

    <mx:HDividedBox
            borderStyle="solid"
            width="100%"
            height="100%"
            >
        <s:VGroup width="30%">
            <s:VGroup>
                <s:Label text="Filter"/>
                <s:ComboBox id="filterCombobox" dataProvider="{filterList}" change="selectedFilterChanged()"/>
                <s:VGroup id="filterProperties" width="100%"/>
            </s:VGroup>

            <s:VGroup>
                <s:Label text="Shape"/>
                <s:ComboBox id="shapeCombobox" dataProvider="{shapeList}" change="selectedShapeChanged()"/>
                <s:VGroup id="shapeProperties" width="100%"/>
            </s:VGroup>
        </s:VGroup>
        <mx:VDividedBox width="70%" height="100%">
            <s:Group
                    id="shapeGroup"
                    width="100%"
                    height="70%"
                    >
            </s:Group>
            <s:VGroup height="30%" width="100%">
                <s:Button label="Generate Sources" click="{theSource.text = generateSources()}"/>
                <s:TextArea id="theSource" editable="false" width="100%" height="100%"/>
            </s:VGroup>
        </mx:VDividedBox>
    </mx:HDividedBox>


</s:WindowedApplication>
