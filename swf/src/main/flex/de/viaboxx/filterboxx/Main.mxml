<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        showStatusBar="true"
        width="800"
        height="600"
        backgroundColor="#EDEDED"
        applicationComplete="selectedShapeChanged(); selectedFilterChanged()"
        >
    <fx:Script>
    <![CDATA[

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayList;
        import mx.controls.CheckBox;
        import mx.controls.ColorPicker;
        import mx.core.UIComponent;
        import mx.graphics.GradientEntry;
        import mx.graphics.LinearGradient;
        import mx.graphics.SolidColor;

        import spark.components.HGroup;
        import spark.components.HSlider;
        import spark.components.Spinner;
        import spark.filters.BevelFilter;
        import spark.filters.BlurFilter;
        import spark.filters.ColorMatrixFilter;
        import spark.filters.ConvolutionFilter;
        import spark.filters.GlowFilter;
        import spark.filters.GradientBevelFilter;
        import spark.filters.GradientGlowFilter;
        import spark.filters.ShaderFilter;
        import spark.primitives.Ellipse;
        import spark.primitives.Rect;
        import spark.primitives.supportClasses.FilledElement;





        [Embed(source="../../../../resources/FuturaMediumBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="normal",
                fontWeight="normal",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const Futura:Class;

        [Embed(source="../../../../resources/FuturaMediumItalicBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="italic",
                fontWeight="normal",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const FuturaItalic:Class;

        [Embed(source="../../../../resources/FuturaBoldBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="normal",
                fontWeight="bold",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const FuturaBold:Class;

        [Embed(source="../../../../resources/FuturaBoldItalicBT.ttf",
                fontName="FuturaEmbed",
                fontStyle="italic",
                fontWeight="bold",
                mimeType="application/x-font",
                embedAsCFF="true")]
        private const FuturaItalicBold:Class;


        private var filterList:ArrayList = new ArrayList([
            new DropShadowFilter(),
            new GlowFilter(),
            new BevelFilter(),
            new BlurFilter(),
            new ColorMatrixFilter(),
            new ConvolutionFilter(),
            //            new DisplacementMapFilter(),
            new GradientBevelFilter(),
            new GradientGlowFilter(),
            new ShaderFilter()]);

        public var filter:IBitmapFilter = dropShadowFilter;

        private function initShape(shape:FilledElement):FilledElement {
            shape.percentWidth = 50;
            shape.percentHeight = 50;
            shape.horizontalCenter = 0;
            shape.verticalCenter = 0;
            shape.fill = new SolidColor(0xFF0000);
            return shape;
        }

        private var shapeList:ArrayList = new ArrayList([
            initShape(new Rect()) ,
            initShape(new Ellipse())
        ]);

        public var shape:FilledElement;

        private static const sourceGenerator:FilterSourceGenerator = new FilterSourceGenerator();

        private function generateSources():String {
            if (filter) {
                return sourceGenerator.sourceForFilter(filter);
            } else {
                return "NO FILTER SELECTED";
            }

        }

        private function createComponentFor(object:*, property:FilterProperty):UIComponent {
            var group:HGroup = new HGroup();
            var spinner:Spinner;
            group.gap = 5;
            var label:Label = new Label();
            label.text = property.name;
            switch (property.dataType) {
                case Boolean:
                    var checkbox:CheckBox = new CheckBox();
                    checkbox.label = property.name;
                    checkbox.selected = object[property.name];
                    BindingUtils.bindProperty(object, property.name, checkbox, "selected");
                    group.addElement(checkbox);
                    break;
                case int:
                //fall-through
                case Number:
                    if (property.maxValue) {
                        var slider:HSlider = new HSlider();
                        slider.minimum = property.minValue;
                        slider.maximum = property.maxValue;
                        slider.stepSize = 0.01;
                        slider.value = object[property.name];
                        BindingUtils.bindProperty(object, property.name, slider, "value");
                        group.addElement(label);
                        group.addElement(slider);
                        if (property.maxValue - property.minValue > 100) {
                            spinner = new Spinner();
                            spinner.value = slider.value;
                            BindingUtils.bindProperty(spinner, "value", slider, "value");
                            BindingUtils.bindProperty(slider, "value", spinner, "value");
                            group.addElement(spinner);
                        }
                    } else {
                        spinner = new Spinner();
                        spinner.stepSize = 1;
                        spinner.value = object[property.name];
                        var valueLabel:Label = new Label();
                        valueLabel.text = object[property.name];
                        BindingUtils.bindProperty(object, property.name, spinner, "value");
                        BindingUtils.bindProperty(valueLabel, "text", spinner, "value");
                        group.addElement(label);
                        group.addElement(valueLabel);
                        group.addElement(spinner);
                    }
                    break;
                case uint:
                    var colorPicker:ColorPicker = new ColorPicker();
                    colorPicker.selectedColor = object[property.name];
                    BindingUtils.bindProperty(object, property.name, colorPicker, "selectedColor");
                    group.addElement(label);
                    group.addElement(colorPicker);
                    break;
                case Array:
                    if (property.arrayType == GradientEntry) {
                        var overviewRect:Rect = new Rect();
                        overviewRect.width = 100;
                        overviewRect.height = 10;

                        var gradientFill:LinearGradient = new LinearGradient();
                        gradientFill.entries = [];
                        overviewRect.fill = gradientFill;
                        group.addElement(overviewRect);

                        var addGradientEntryButton:Button = new Button();
                        addGradientEntryButton.label = "+";
                        var controlsGroup:VGroup = new VGroup();
                        group.addElement(controlsGroup);

                        function clearControlsGroup():void {
                            controlsGroup.removeAllElements();
                        }

                        function addControls(entries:Array):void {
                            entries.forEach(function(item:GradientEntry, index:int, array:Array):void {
                                var label:Label = new Label();
                                label.text = "Entry:";
                                controlsGroup.addElement(label);
                                var colorChooser:ColorPicker = new ColorPicker();
                                colorChooser.selectedColor = item.color;
                                BindingUtils.bindProperty(item, "color", colorChooser, "selectedColor");
                                controlsGroup.addElement(colorChooser);
                                var alphaSlider:HSlider = new HSlider();
                                alphaSlider.value = item.alpha;
                                alphaSlider.minimum = 0;
                                alphaSlider.maximum = 1;
                                alphaSlider.stepSize = .01;
                                BindingUtils.bindProperty(item, "alpha", alphaSlider, "value");
                                controlsGroup.addElement(alphaSlider);
                                var removeButton:Button = new Button();
                                removeButton.label = "-";
                                removeButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
                                    var newGradients:Array = gradientFill.entries.filter(function(entry:GradientEntry, ...rest):Boolean {
                                        return entry != item;
                                    });
                                    gradientFill.entries = newGradients;
                                    object[property.name] = gradientFill.entries;
                                    clearControlsGroup();
                                    addControls(newGradients);
                                });

                                var ratioLabel:Label = new Label();
                                ratioLabel.text = item.ratio.toString();
                                BindingUtils.bindProperty(ratioLabel, "text", item, "ratio");
                                var ratioSlider:HSlider = new HSlider();
                                ratioSlider.minimum = 0;
                                ratioSlider.maximum = 1;
                                ratioSlider.stepSize = .01;
                                ratioSlider.value = item.ratio;
                                BindingUtils.bindProperty(item, "ratio", ratioSlider, "value");
                                controlsGroup.addElement(ratioSlider);
                                controlsGroup.addElement(ratioLabel);
                                controlsGroup.addElement(removeButton);
                            });
                        }

                        addGradientEntryButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
                            var newGradients:Array = [new GradientEntry(0xFF0000, 1)].concat(gradientFill.entries);
                            overviewRect.invalidateProperties();
                            newGradients = newGradients.sort(function(a:GradientEntry, b:GradientEntry):int {
                                return b.ratio - a.ratio;
                            });
                            gradientFill.entries = newGradients;
                            object[property.name] = gradientFill.entries;
                            clearControlsGroup();
                            addControls(newGradients);
                        });

                        group.addElement(addGradientEntryButton);
                    }
                    break;
                default:
                    return null;
            }
            return group;
        }

        private function addFilterPropertyEditors():void {
            FilterDescription.forFilter(filter).forEachProperty(function(property:FilterProperty):void {
                var component:UIComponent = createComponentFor(filter, property);
                if (component) {
                    filterProperties.addElement(component);
                }
            });
        }


        private function selectedFilterChanged():void {
            if (filterCombobox.selectedIndex == -1) {
                filterCombobox.selectedIndex = 0;
            }
            filter = filterCombobox.selectedItem;
            removeFilterFromShape();
            clearFilterPropertyEditors();
            addFilterPropertyEditors();
            addFilterToShape();
        }

        private function clearFilterPropertyEditors():void {
            filterProperties.removeAllElements();
        }

        private function addFilterToShape():void {
            shape.filters = [filter];
        }

        private function removeFilterFromShape():void {
            shape.filters = [];
        }

        private function selectedShapeChanged():void {
            if (shapeCombobox.selectedIndex == -1) {
                shapeCombobox.selectedIndex = 0;
            }
            shape = shapeCombobox.selectedItem;
            shapeGroup.removeAllElements();
            shapeGroup.addElement(shape);

            //controls
            shapeProperties.removeAllElements();
            shapeProperties.addElement(createComponentFor(shape.fill, new FilterProperty("color", uint)));
            var width:FilterProperty = new FilterProperty("percentWidth", Number);
            width.minValue = 0;
            width.maxValue = 100;
            shapeProperties.addElement(createComponentFor(shape, width));
            var height:FilterProperty = new FilterProperty("percentHeight", Number);
            height.minValue = 0;
            height.maxValue = 100;
            shapeProperties.addElement(createComponentFor(shape, height));
            var alpha:FilterProperty = new FilterProperty("alpha", Number);
            alpha.minValue = 0;
            alpha.maxValue = 1;
            shapeProperties.addElement(createComponentFor(shape, alpha));
            if (shape.hasOwnProperty("radiusX")) {
                shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
            }
            if (shape.hasOwnProperty("radiusY")) {
                shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
            }
            addFilterToShape();
        }

        ]]>
               }
        addFilterToShape();
        }

        ]]>
        (createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        operty("radiusY")
        )
        {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        iusX
        ", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        entFor(shape, new FilterProperty("radiusX", Number))
        )
        ;
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        roperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ")) {
        shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ComponentFor(shape, alpha)
        )
        ;
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        hapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        pha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        roperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        pha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ,
        height
        ))
        ;
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ddElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        lue = 100;
        shapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        lue = 0;
        height.maxValue = 100;
        shapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        )
        ;
        height.minValue = 0;
        height.maxValue = 100;
        shapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        t.maxValue = 100;
        shapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        .
        maxValue = 100;
        shapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        shapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        hapeProperties.addElement(createComponentFor(shape, height));
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ComponentFor(shape, height)
        )
        ;
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        omponentFor(shape, height)
        )
        ;
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        var alpha:FilterProperty = new FilterProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        terProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        erProperty("alpha", Number);
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        alpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        lpha.minValue = 0;
        alpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        lpha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        pha.maxValue = 1;
        shapeProperties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        erties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        rties.addElement(createComponentFor(shape, alpha));
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        pe,alpha
        ))
        ;
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        e,alpha
        ))
        ;
        if (shape.hasOwnProperty("radiusX")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        e.hasOwnProperty("radiusX")
        )
        {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        .
        hasOwnProperty("radiusX")
        )
        {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        lement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ement(createComponentFor(shape, new FilterProperty("radiusX", Number)));
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        new FilterProperty("radiusX", Number)
        ))
        ;
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ew
        FilterProperty("radiusX", Number)
        ))
        ;
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        mber
        )))
        ;
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ber
        )))
        ;
        }
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        if (shape.hasOwnProperty("radiusY")) {
            shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        sY
        ")) {
        shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        Y
        ")) {
        shapeProperties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        rties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        ties.addElement(createComponentFor(shape, new FilterProperty("radiusY", Number)));
        }
        addFilterToShape();
        }

        ]]>
        nentFor(shape, new FilterProperty("radiusY", Number))
        )
        ;
        }
        addFilterToShape();
        }

        ]]>
        entFor(shape, new FilterProperty("radiusY", Number))
        )
        ;
        }
        addFilterToShape();
        }

        ]]>
        y("radiusY", Number)
        ))
        ;
        }
        addFilterToShape();
        }

        ]]>
        ("radiusY",Number)
        ))
        ;
        }
        addFilterToShape();
        }

        ]]>
        }
        addFilterToShape();
        }

        ]]>
        }
        addFilterToShape();
        }

        ]]>
        hape();
        }

        ]]>
        ape();
        }

        ]]>
    </fx:Script>


    <fx:Declarations>
        <s:DropShadowFilter
                id="dropShadowFilter"
                />
    </fx:Declarations>

    <mx:HDividedBox
            borderStyle="solid"
            width="100%"
            height="100%"
            >
        <s:VGroup width="30%">
            <s:VGroup>
                <s:Label text="Filter"/>
                <s:ComboBox id="filterCombobox" dataProvider="{filterList}" change="selectedFilterChanged()"/>
                <s:VGroup id="filterProperties" width="100%"/>
            </s:VGroup>

            <s:VGroup>
                <s:Label text="Shape"/>
                <s:ComboBox id="shapeCombobox" dataProvider="{shapeList}" change="selectedShapeChanged()"/>
                <s:VGroup id="shapeProperties" width="100%"/>
            </s:VGroup>
        </s:VGroup>
        <mx:VDividedBox width="70%" height="100%">
            <s:Group
                    id="shapeGroup"
                    width="100%"
                    height="70%"
                    >
            </s:Group>
            <s:VGroup height="30%" width="100%">
                <s:Button label="Generate Sources" click="{theSource.text = generateSources()}"/>
                <s:TextArea id="theSource" editable="false" width="100%" height="100%"/>
            </s:VGroup>
        </mx:VDividedBox>
    </mx:HDividedBox>


</s:WindowedApplication>
